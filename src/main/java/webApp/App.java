/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package webApp;

import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;
import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        port(getHerokuAssignedPort());

        get("/", (request, response) -> "Hello! To reach the application, please go to /compute part.");


        get("/compute",
            (request, response) -> {
                Map<String, String> map = new HashMap<String, String>();
                map.put("result", "Result has not computed yet.");
                return new ModelAndView(map, "compute.mustache");
            }, new MustacheTemplateEngine()
        );

        post("/compute",
            (request, response) -> {
                String inputArray = request.queryParams("inputArray");
                java.util.Scanner sc = new java.util.Scanner(inputArray);
                sc.useDelimiter(",");

                ArrayList<Integer> inputArraylist = new ArrayList<>();
                while(sc.hasNext()){
                    int intValue = Integer.parseInt(sc.next().replaceAll("\\s", ""));
                    inputArraylist.add(intValue);
                }
                sc.close();

                int[] integerArray = new int[inputArraylist.size()];
                for (int i=0; i < integerArray.length; i++)
                {
                    integerArray[i] = inputArraylist.get(i).intValue();
                }

                int inputNumber1 = Integer.parseInt(request.queryParams("inputNumber1").replaceAll("\\s", ""));
                int inputNumber2 = Integer.parseInt(request.queryParams("inputNumber2").replaceAll("\\s", ""));
        
                int result = App.findMoreContainedNumber(integerArray, inputNumber1, inputNumber2);
                Map<String, Integer> map = new HashMap<String, Integer>();
                map.put("result", result);
                return new ModelAndView(map, "compute.mustache");
            }, new MustacheTemplateEngine()
        );
    }

    public static int getHerokuAssignedPort() {
        ProcessBuilder processBuilder = new ProcessBuilder();
        if (processBuilder.environment().get("PORT") != null) {
            return Integer.parseInt(processBuilder.environment().get("PORT"));
        }
        return 4567; //return default port if heroku-port isn't set (i.e. on localhost)
    }


    public static int findMoreContainedNumber(int[] array, Integer number1, Integer number2){
        int number1Count = 0;
        int number2Count = 0;

        for(int i = 0; i < array.length; i++){
            if(array[i] == number1.intValue()){
                number1Count++;
            }
            if(array[i] == number2.intValue()){
                number2Count++;
            }
        }

        if(number1Count > number2Count){
            return number1;
        }
        else if(number2Count > number1Count){
            return number2;
        }
        else if(number1Count == 0 && number2Count == 0){
            return -1;
        }
        else{ //number1Count = number2Count but neither of them is 0.
            return 0;
        }
    }
}
